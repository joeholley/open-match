syntax = 'proto3';
package api;
option go_package = "github.com/GoogleCloudPlatform/open-match/internal/pb";

// The protobuf messages sent in the gRPC calls are defined 'messages.proto'.
import 'api/protobuf-spec/messages.proto';

service Backend {
  // Calls to ask the matchmaker to run a matchmaking function.

  // Run MMF once.  Return a matchobject that fits this profile.
  // INPUT: MatchObject message with these fields populated:
  //  - id
  //  - properties
  //  - [optional] roster, any fields you fill are available to your MMF.
  //  - [optional] pools, any fields you fill are available to your MMF.
  // OUTPUT: MatchObject message with these fields populated:
  //  - id
  //  - properties
  //  - error. Empty if no error was encountered
  //  - rosters, if you choose to fill them in your MMF. (Recommended)
  //  - pools, if you used the MMLogicAPI in your MMF. (Recommended, and provides stats)
  rpc CreateMatch(messages.CreateMatchRequest) returns (messages.MatchObject) {} 
  // Continually run MMF and stream MatchObjects that fit this profile until
  // the backend client closes the connection.  Same inputs/outputs as CreateMatch.
  rpc ListMatches(messages.MatchObject) returns (stream messages.MatchObject) {}

  // Delete a MatchObject from state storage manually. (MatchObjects in state
  // storage will also automatically expire after a while, defined in the config)
  // INPUT: MatchObject message with the 'id' field populated. 
  // (All other fields are ignored.)
  rpc DeleteMatch(messages.MatchObject) returns (messages.Result) {}

  // Calls for communication of connection info to players. 

  // Write the connection info for the list of players in the
  // Assignments.messages.Rosters to state storage.  The Frontend API is
  // responsible for sending anything sent here to the game clients.
  // Sending a player to this function kicks off a process that removes
  // the player from future matchmaking functions by adding them to the 
  // 'deindexed' player list and then deleting their player ID from state storage
  // indexes.
  // INPUT: Assignments message with these fields populated:
  //  - assignment, anything you write to this string is sent to Frontend API 
  //  - rosters. You can send any number of rosters, containing any number of
  //     player messages. All players from all rosters will be sent the assignment.
  //     The only field in the Roster's Player messages used by CreateAssignments is
  //     the id field.  All other fields in the Player messages are silently ignored.
  rpc CreateAssignments(messages.Assignments) returns (messages.Result) {}
  // Remove DGS connection info from state storage for players. 
  // INPUT: Roster message with the 'players' field populated. 
  //    The only field in the Roster's Player messages used by
  //    DeleteAssignments is the 'id' field.  All others are silently ignored.  If
  //    you need to delete multiple rosters, make multiple calls.
  rpc DeleteAssignments(messages.Roster) returns (messages.Result) {}
}
